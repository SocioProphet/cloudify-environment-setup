tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-aws-plugin/1.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml
  - imports/manager-configuration.yaml

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY

  ec2_region_name:
    default: us-east-1

  ec2_region_endpoint:
    default: ec2.us-east-1.amazonaws.com

  cloudify_image_username:
    default: centos

  local_ssh_directory:
    default: '~/.ssh/'

  manager_key_name:
    default: cfy-manager-key-aws

  agent_key_name:
    default: cfy-agent-key-aws

  cloudify_key_file:
    default: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }

  availability_zone:
    default: us-east-1e

  default_tags:
    default:
      owner: hello@getcloudify.org

  nat_image_id:
    description: >
      An AWS NAT instance AMI. Default is for region us-east-1.
      For other regions, search Community AMIs: amzn-ami-vpc-nat-pv-2014.09.1.x86_64-ebs.
    default: ami-224dc94a

  nat_instance_type:
    default: t1.micro

  nat_instance_block_device_mapping:
    default:
      '/dev/sda1':
        size: 8
        delete_on_termination: true

  cloudify_host_block_device_mapping:
    default:
      '/dev/sda1':
        delete_on_termination: true

  cloudify_ami:
    description: >
      A Cloudify Manager AMI. Default is for region us-east-1.
      Other available regions:
        us-west-1: ami-810f21e1
        eu-west-1: ami-9b6587e2
        ap-northeast-1: ami-37f3e850
        ap-southeast-1: ami-539f0830
        sa-east-1: ami-cd3a4ea1
      For a vanilla CentOS ami, try: ami-0fbdf765 (us-east-1), change cloudify_image_username: ec2-user, and change cloudify_host_block_device_mapping from '/dev/sda1' to '/dev/sda'.
    default: ami-89fcf39f

  cloudify_instance_type:
    default: m3.large

  centos_core_image:
    default: ami-0fbdf765

  ubuntu_trusty_image:
    default: ami-772aa961

  manager_ip:
    description: >
      Resolving the IP for manager setup.
    default: { get_attribute: [ subnet0_nic_eip0, aws_resource_id ] }

  plugin_urls:
    description: >
      Plugins used in AWS blueprint examples.
    default:
    - https://github.com/cloudify-incubator/cloudify-utilities-plugin/releases/download/1.2.5/cloudify_utilities_plugin-1.2.5-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-aws-plugin/1.4.9/cloudify_aws_plugin-1.4.9-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-aws-plugin/1.4.10/cloudify_aws_plugin-1.4.10-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-aws-plugin/1.4.11/cloudify_aws_plugin-1.4.11-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-aws-plugin/1.4.12/cloudify_aws_plugin-1.4.12-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-aws-plugin/1.4.13/cloudify_aws_plugin-1.4.13-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-centos-Core.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-Ubuntu-trusty.wgn
    - https://github.com/cloudify-incubator/cloudify-awssdk-plugin/releases/download/1.0.0/cloudify_awssdk_plugin-1.0.0-py27-none-any-none-none.wgn
    - http://repository.cloudifysource.org/cloudify/wagons/cloudify-fabric-plugin/1.5/cloudify_fabric_plugin-1.5-py27-none-linux_x86_64-centos-Core.wgn
    - https://github.com/cloudify-incubator/cloudify-kubernetes-plugin/releases/download/1.1.0/cloudify_kubernetes_plugin-1.1.0-py27-none-linux_x86_64-centos-Core.wgn
    - https://github.com/cloudify-incubator/cloudify-kubernetes-plugin/releases/download/1.0.0/cloudify_kubernetes_plugin-1.0.0-py27-none-linux_x86_64.wgn

  secrets:
    description: >
      key, value pairs of secrets used in AWS blueprint examples.
    default:
      - key: aws_access_key_id
        value: { get_input: aws_access_key_id }
      - key: aws_secret_access_key
        value: { get_input: aws_secret_access_key }
      - key: ec2_region_name
        value: { get_input: ec2_region_name }
      - key: ec2_region_endpoint
        value: { get_input: ec2_region_endpoint }
      - key: vpc_id
        value: { get_attribute: [ vpc, aws_resource_id ] }
      - key: public_subnet_id
        value: { get_attribute: [ subnet0, aws_resource_id ] }
      - key: private_subnet_id
        value: { get_attribute: [ subnet1, aws_resource_id ] }
      - key: availability_zone
        value: { get_input: availability_zone }
      - key: ubuntu_trusty_image
        value: { get_input: ubuntu_trusty_image }
      - key: centos_core_image
        value: { get_input: centos_core_image }
      - key: agent_key_public
        value: { get_attribute: [ agent_key, public_key_export ] }
      - key: agent_key_private
        value: { get_attribute: [ agent_key, private_key_export ] }

  create_inputs:
    default:
      local_private_key: { get_input: cloudify_key_file  }
      rpm_package: { get_input: cli_package_url }
      public_ip: { get_attribute: [ subnet0_nic_eip0, aws_resource_id ] }
      private_ip: { get_attribute: [ cloudify_host, ip ] }
      ssh_user: { get_input: cloudify_image_username }
      ssh_key_filename:
        concat:
        - '/home/'
        - { get_input: cloudify_image_username }
        - '/.ssh/key.pem'

dsl_definitions:
  client_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
    ec2_region_endpoint: { get_input: ec2_region_endpoint }

node_templates:

  manager_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: manager_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: manager_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        public_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name }, '.pub' ] }
        private_key_path: { concat: [ { get_input: local_ssh_directory }, { get_input: agent_key_name } ] }
        openssh_format: true
      use_secret_store: false
      key_name: { get_input: agent_key_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  subnet0_nic_eip0:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      domain: vpc

  subnet0_nic_eip1:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      domain: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *client_config
      cidr_block: 10.10.0.0/16
      tags: { get_input: default_tags }

  internet_gateway:
    type: cloudify.aws.nodes.InternetGateway
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
    - type: cloudify.aws.relationships.gateway_connected_to_vpc
      target: vpc

  subnet0:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *client_config
      cidr_block: 10.10.0.0/24
      availability_zone: { get_input: availability_zone }
      tags: { get_input: default_tags }
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: vpc
    - type: cloudify.relationships.depends_on
      target: internet_gateway

  subnet1:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *client_config
      cidr_block: 10.10.1.0/24
      availability_zone: { get_input: availability_zone }
      tags: { get_input: default_tags }
    relationships:
    - type: cloudify.aws.relationships.subnet_contained_in_vpc
      target: vpc
    - type: cloudify.relationships.depends_on
      target: internet_gateway

  nat_instance_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      description: Cloudify Community AMI NAT Security Group
      rules:
      - ip_protocol: -1
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
    relationships:
    - type: cloudify.aws.relationships.security_group_contained_in_vpc
      target: vpc

  cloudify_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      description: Cloudify Community AMI Security Group
      rules:
      - ip_protocol: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 5671
        to_port: 5671
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 8101
        to_port: 8101
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 53333
        to_port: 53333
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 8300
        to_port: 8300
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 8301
        to_port: 8301
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 8500
        to_port: 8500
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 22000
        to_port: 22000
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
      - ip_protocol: tcp
        from_port: 15432
        to_port: 15432
        cidr_ip: { get_property:  [ vpc, cidr_block ] }
    relationships:
    - type: cloudify.aws.relationships.security_group_contained_in_vpc
      target: vpc

  subnet0_nic0:
    type: cloudify.aws.nodes.Interface
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
      - type: cloudify.aws.relationships.connected_to_subnet
        target: subnet0
      - type: cloudify.aws.relationships.connected_to_elastic_ip
        target: subnet0_nic_eip0
      - type: cloudify.aws.relationships.connected_to_security_group
        target: cloudify_security_group

  subnet0_nic1:
    type: cloudify.aws.nodes.Interface
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
      - type: cloudify.aws.relationships.connected_to_subnet
        target: subnet0
      - type: cloudify.aws.relationships.connected_to_elastic_ip
        target: subnet0_nic_eip1
      - type: cloudify.aws.relationships.connected_to_security_group
        target: nat_instance_security_group

  nat_instance:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      name: NAT Instance
      image_id: { get_input: nat_image_id }
      instance_type: { get_input: nat_instance_type }
      agent_config:
        install_method: none
      parameters:
        block_device_map: { get_input: nat_instance_block_device_mapping }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: aws.cloudify_aws.ec2.instance.modify_attributes
          inputs:
            new_attributes:
              sourceDestCheck: false
    relationships:
      - type: cloudify.aws.relationships.instance_contained_in_subnet
        target: subnet0
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: subnet0_nic1

  route_table0:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: subnet0
      - type: cloudify.aws.relationships.route_table_to_gateway
        target: internet_gateway

  route_table1:
    type: cloudify.aws.nodes.RouteTable
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
    relationships:
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.vpc.routetable.create_route_table
          inputs:
            routes:
              - destination_cidr_block: 0.0.0.0/0
                instance_id: { get_attribute: [ nat_instance, aws_resource_id ] }
    relationships:
      - type: cloudify.aws.relationships.routetable_contained_in_vpc
        target: vpc
      - type: cloudify.aws.relationships.routetable_associated_with_subnet
        target: subnet1
      - type: cloudify.relationships.connected_to
        target: nat_instance

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              users:
              - name: { get_input: cloudify_image_username }
                primary-group: wheel
                shell: /bin/bash
                sudo: ['ALL=(ALL) NOPASSWD:ALL']
                ssh-authorized-keys:
                - { get_attribute: [ manager_key, public_key_export ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: manager_key

  cloudify_host:
    type: cloudify.aws.nodes.Instance
    properties:
      aws_config: *client_config
      tags: { get_input: default_tags }
      name: Cloudify Manager
      agent_config:
        install_method: none
        user: { get_input: cloudify_image_username }
      image_id: { get_input: cloudify_ami }
      instance_type: { get_input: cloudify_instance_type }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map: { get_input: cloudify_host_block_device_mapping }
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: subnet0_nic0

outputs:

  1-Instructions:
    value: { get_attribute: [ ManagerSetup, final_path ] }
  2-Demo:
    value: 'cfy install https://github.com/cloudify-examples/nodecellar-auto-scale-auto-heal-blueprint/archive/4.1.zip -b demo -n aws-blueprint.yaml'
